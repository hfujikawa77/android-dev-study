/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE LANDING_TARGET PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
 * The location of a landing target. See: https://mavlink.io/en/services/landing_target.html
 */
public class msg_landing_target extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_LANDING_TARGET = 149;
    public static final int MAVLINK_MSG_LENGTH = 30;
    private static final long serialVersionUID = MAVLINK_MSG_ID_LANDING_TARGET;

      
    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
     */
    public long time_usec;
      
    /**
     * X-axis angular offset of the target from the center of the image
     */
    public float angle_x;
      
    /**
     * Y-axis angular offset of the target from the center of the image
     */
    public float angle_y;
      
    /**
     * Distance to the target from the vehicle
     */
    public float distance;
      
    /**
     * Size of target along x-axis
     */
    public float size_x;
      
    /**
     * Size of target along y-axis
     */
    public float size_y;
      
    /**
     * The ID of the target if multiple targets are present
     */
    public short target_num;
      
    /**
     * Coordinate frame used for following fields.
     */
    public short frame;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_LANDING_TARGET;
        
        packet.payload.putUnsignedLong(time_usec);
        packet.payload.putFloat(angle_x);
        packet.payload.putFloat(angle_y);
        packet.payload.putFloat(distance);
        packet.payload.putFloat(size_x);
        packet.payload.putFloat(size_y);
        packet.payload.putUnsignedByte(target_num);
        packet.payload.putUnsignedByte(frame);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a landing_target message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_usec = payload.getUnsignedLong();
        this.angle_x = payload.getFloat();
        this.angle_y = payload.getFloat();
        this.distance = payload.getFloat();
        this.size_x = payload.getFloat();
        this.size_y = payload.getFloat();
        this.target_num = payload.getUnsignedByte();
        this.frame = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_landing_target() {
        this.msgid = MAVLINK_MSG_ID_LANDING_TARGET;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_landing_target( long time_usec, float angle_x, float angle_y, float distance, float size_x, float size_y, short target_num, short frame) {
        this.msgid = MAVLINK_MSG_ID_LANDING_TARGET;

        this.time_usec = time_usec;
        this.angle_x = angle_x;
        this.angle_y = angle_y;
        this.distance = distance;
        this.size_x = size_x;
        this.size_y = size_y;
        this.target_num = target_num;
        this.frame = frame;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_landing_target( long time_usec, float angle_x, float angle_y, float distance, float size_x, float size_y, short target_num, short frame, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_LANDING_TARGET;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.angle_x = angle_x;
        this.angle_y = angle_y;
        this.distance = distance;
        this.size_x = size_x;
        this.size_y = size_y;
        this.target_num = target_num;
        this.frame = frame;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_landing_target(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_LANDING_TARGET;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                    
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_LANDING_TARGET - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" angle_x:"+angle_x+" angle_y:"+angle_y+" distance:"+distance+" size_x:"+size_x+" size_y:"+size_y+" target_num:"+target_num+" frame:"+frame+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_LANDING_TARGET";
    }
}
        